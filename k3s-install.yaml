---
# Playbook: K3s Kubernetes Cluster Installation and Configuration
#
# Purpose:
# This playbook automates the deployment of a K3s Kubernetes cluster with multiple nodes.
# It handles both control plane and agent node installation, ensuring proper cluster
# formation and configuration.
#
# Required Variables:
# - k3s_version: Version of K3s to install
# - k3s_token: Cluster join token
# - db_endpoint: External database connection string
# - api_endpoint: Kubernetes API endpoint address

# Phase 1: Install Control Plane Nodes
# This phase runs serially across control plane nodes to ensure proper cluster formation
- name: Install K3s Control Plane
  hosts: control_plane
  become: true
  serial: 1

  tasks:
    # Install K3s in server mode on control plane nodes
    - name: Install and verify control plane nodes
      block:
        # Download and install K3s server
        - name: Install K3s server
          shell: |
            curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -s - server \
              --token={{ k3s_token }} \
              --datastore-endpoint="{{ db_endpoint }}" \
              --disable=traefik \
              --kube-proxy-arg=ipvs-strict-arp=true \
              --disable=servicelb \
              --tls-san={{ api_endpoint }}
          args:
            # Prevent reinstallation if K3s is already installed
            creates: /usr/local/bin/k3s

        # Ensure K3s server service is running
        - name: Ensure K3s service is running
          systemd:
            name: k3s
            state: started
            enabled: yes
          # Store the K3s service status to check if it's active
          register: k3s_service_status
          # Retry up to 10 times with 5 second delays until service is active
          until: k3s_service_status.status.ActiveState == "active"
          retries: 10
          delay: 5
          # This task only checks service status, it doesn't modify the system
          changed_when: false

        # Verify K3s API is responding
        - name: Wait for K3s API to be available
          shell: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get --raw /healthz
          # Store the API health check result to verify cluster is responding
          register: k3s_api_health
          # Retry up to 30 times with 10 second delays until API responds
          until: k3s_api_health.rc == 0
          retries: 30
          delay: 10
          # This task only verifies API health, it doesn't modify the system
          changed_when: false


# Phase 2: Install Agent Nodes
# This phase adds worker nodes to the cluster, running serially to ensure proper node joining
- name: Install K3s Agents
  hosts: agents
  become: true
  serial: 1

  tasks:
    # Install K3s in agent mode on agent nodes
    - name: Install and verify agent nodes
      block:
        # Download and install K3s agent
        - name: Install K3s agent
          shell: |
            curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_token }} INSTALL_K3S_VERSION={{ k3s_version }} sh -s - agent \
              --server https://{{ api_endpoint }}:6443 \
              --kube-proxy-arg=ipvs-strict-arp=true
          args:
            # Prevent reinstallation if K3s is already installed
            creates: /usr/local/bin/k3s

        # Ensure K3s agent service is running
        - name: Ensure K3s agent service is running
          systemd:
            name: k3s-agent
            state: started
            enabled: yes
          # Store the K3s agent service status to check if it's active
          register: k3s_agent_service_status
          # Retry up to 10 times with 5 second delays until service is active
          until: k3s_agent_service_status.status.ActiveState == "active"
          retries: 10
          delay: 5
          # This task only checks service status, it doesn't modify the system
          changed_when: false


# Phase 3: Verify Cluster Health and Display Configuration
# This phase ensures the cluster is healthy and displays the final configuration
- name: Verify K3s Cluster Health and Show Configuration
  hosts: control_plane[0]
  become: true

  tasks:
    # Verify all nodes are ready in the cluster
    - name: Wait for nodes to be ready
      shell: kubectl wait --for=condition=Ready nodes --all --timeout=300s
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      register: wait_result
      until: wait_result.rc == 0
      retries: 10
      delay: 30
      # This task only checks node readiness, it doesn't modify the system
      changed_when: false

    # Show the kubeconfig as the final step
    - name: Read kubeconfig
      slurp:
        src: /etc/rancher/k3s/k3s.yaml
      register: kubeconfig

    - name: Display kubeconfig
      debug:
        msg: "{{ kubeconfig['content'] | b64decode }}"